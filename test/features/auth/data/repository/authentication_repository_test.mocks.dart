// Mocks generated by Mockito 5.4.2 from annotations
// in dairy_app/test/features/auth/data/repository/authentication_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dairy_app/core/network/network_info.dart' as _i6;
import 'package:dairy_app/features/auth/data/datasources/local%20data%20sources/local_data_source_template.dart'
    as _i3;
import 'package:dairy_app/features/auth/data/datasources/remote%20data%20sources/remote_data_source_template.dart'
    as _i5;
import 'package:dairy_app/features/auth/data/models/logged_in_user_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoggedInUserModel_0 extends _i1.SmartFake
    implements _i2.LoggedInUserModel {
  _FakeLoggedInUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthLocalDataSource extends _i1.Mock
    implements _i3.IAuthLocalDataSource {
  MockIAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.LoggedInUserModel> signUpUser({
    required dynamic id,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [],
          {
            #id: id,
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i2.LoggedInUserModel>.value(_FakeLoggedInUserModel_0(
          this,
          Invocation.method(
            #signUpUser,
            [],
            {
              #id: id,
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.LoggedInUserModel>);
  @override
  _i4.Future<_i2.LoggedInUserModel> signInUser({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInUser,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i2.LoggedInUserModel>.value(_FakeLoggedInUserModel_0(
          this,
          Invocation.method(
            #signInUser,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.LoggedInUserModel>);
  @override
  _i4.Future<void> cacheUser({
    required dynamic id,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheUser,
          [],
          {
            #id: id,
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<bool> verifyPassword(
    String? userId,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPassword,
          [
            userId,
            password,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<void> updatePassword({
    required String? email,
    required String? oldPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [],
          {
            #email: email,
            #oldPassword: oldPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.LoggedInUserModel> signInDirectly({required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInDirectly,
          [],
          {#userId: userId},
        ),
        returnValue:
            _i4.Future<_i2.LoggedInUserModel>.value(_FakeLoggedInUserModel_0(
          this,
          Invocation.method(
            #signInDirectly,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i4.Future<_i2.LoggedInUserModel>);
  @override
  _i4.Future<void> updateEmail({
    required String? oldEmail,
    required String? password,
    required String? newEmail,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEmail,
          [],
          {
            #oldEmail: oldEmail,
            #password: password,
            #newEmail: newEmail,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [IAuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRemoteDataSource extends _i1.Mock
    implements _i5.IAuthRemoteDataSource {
  MockIAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.LoggedInUserModel> signUpUser({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i2.LoggedInUserModel>.value(_FakeLoggedInUserModel_0(
          this,
          Invocation.method(
            #signUpUser,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.LoggedInUserModel>);
  @override
  _i4.Future<_i2.LoggedInUserModel> signInUser({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInUser,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i2.LoggedInUserModel>.value(_FakeLoggedInUserModel_0(
          this,
          Invocation.method(
            #signInUser,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.LoggedInUserModel>);
  @override
  _i4.Future<void> updatePassword({
    required String? email,
    required String? oldPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [],
          {
            #email: email,
            #oldPassword: oldPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> submitForgotPasswordEmail(String? forgotPasswordEmail) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitForgotPasswordEmail,
          [forgotPasswordEmail],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> updateEmail({
    required String? oldEmail,
    required String? password,
    required String? newEmail,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEmail,
          [],
          {
            #oldEmail: oldEmail,
            #password: password,
            #newEmail: newEmail,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [INetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockINetworkInfo extends _i1.Mock implements _i6.INetworkInfo {
  MockINetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
