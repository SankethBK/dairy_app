// Mocks generated by Mockito 5.4.2 from annotations
// in dairy_app/test/features/auth/domain/usecases/sign_up_with_email_and_password_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dairy_app/features/auth/core/failures/failures.dart' as _i7;
import 'package:dairy_app/features/auth/core/validators/email_validator.dart'
    as _i3;
import 'package:dairy_app/features/auth/core/validators/password_validator.dart'
    as _i4;
import 'package:dairy_app/features/auth/domain/entities/logged_in_user.dart'
    as _i8;
import 'package:dairy_app/features/auth/domain/repositories/authentication_repository.dart'
    as _i5;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EmailValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailValidator extends _i1.Mock implements _i3.EmailValidator {
  MockEmailValidator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool call(String? email) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [email],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [PasswordValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockPasswordValidator extends _i1.Mock implements _i4.PasswordValidator {
  MockPasswordValidator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool call(String? password) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [password],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [IAuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthenticationRepository extends _i1.Mock
    implements _i5.IAuthenticationRepository {
  MockIAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.SignUpFailure, _i8.LoggedInUser>>
      signUpWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #signUpWithEmailAndPassword,
              [],
              {
                #email: email,
                #password: password,
              },
            ),
            returnValue: _i6
                .Future<_i2.Either<_i7.SignUpFailure, _i8.LoggedInUser>>.value(
                _FakeEither_0<_i7.SignUpFailure, _i8.LoggedInUser>(
              this,
              Invocation.method(
                #signUpWithEmailAndPassword,
                [],
                {
                  #email: email,
                  #password: password,
                },
              ),
            )),
          ) as _i6.Future<_i2.Either<_i7.SignUpFailure, _i8.LoggedInUser>>);
  @override
  _i6.Future<_i2.Either<_i7.SignInFailure, _i8.LoggedInUser>>
      signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #signInWithEmailAndPassword,
              [],
              {
                #email: email,
                #password: password,
              },
            ),
            returnValue: _i6
                .Future<_i2.Either<_i7.SignInFailure, _i8.LoggedInUser>>.value(
                _FakeEither_0<_i7.SignInFailure, _i8.LoggedInUser>(
              this,
              Invocation.method(
                #signInWithEmailAndPassword,
                [],
                {
                  #email: email,
                  #password: password,
                },
              ),
            )),
          ) as _i6.Future<_i2.Either<_i7.SignInFailure, _i8.LoggedInUser>>);
  @override
  _i6.Future<bool> verifyPassword(
    String? userId,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPassword,
          [
            userId,
            password,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<_i2.Either<_i7.SignUpFailure, bool>> updatePassword(
    String? email,
    String? oldPassword,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [
            email,
            oldPassword,
            newPassword,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.SignUpFailure, bool>>.value(
            _FakeEither_0<_i7.SignUpFailure, bool>(
          this,
          Invocation.method(
            #updatePassword,
            [
              email,
              oldPassword,
              newPassword,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.SignUpFailure, bool>>);
  @override
  _i6.Future<void> isFingerprintAuthPossible() => (super.noSuchMethod(
        Invocation.method(
          #isFingerprintAuthPossible,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Stream<_i5.FingerPrintAuthState> processFingerPrintAuth() =>
      (super.noSuchMethod(
        Invocation.method(
          #processFingerPrintAuth,
          [],
        ),
        returnValue: _i6.Stream<_i5.FingerPrintAuthState>.empty(),
      ) as _i6.Stream<_i5.FingerPrintAuthState>);
  @override
  _i6.Future<_i2.Either<_i7.SignInFailure, _i8.LoggedInUser>> signInDirectly(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInDirectly,
          [],
          {#userId: userId},
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.SignInFailure, _i8.LoggedInUser>>.value(
                _FakeEither_0<_i7.SignInFailure, _i8.LoggedInUser>(
          this,
          Invocation.method(
            #signInDirectly,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.SignInFailure, _i8.LoggedInUser>>);
  @override
  _i6.Future<_i2.Either<_i7.ForgotPasswordFailure, bool>>
      submitForgotPasswordEmail(String? forgotPasswordEmail) =>
          (super.noSuchMethod(
            Invocation.method(
              #submitForgotPasswordEmail,
              [forgotPasswordEmail],
            ),
            returnValue:
                _i6.Future<_i2.Either<_i7.ForgotPasswordFailure, bool>>.value(
                    _FakeEither_0<_i7.ForgotPasswordFailure, bool>(
              this,
              Invocation.method(
                #submitForgotPasswordEmail,
                [forgotPasswordEmail],
              ),
            )),
          ) as _i6.Future<_i2.Either<_i7.ForgotPasswordFailure, bool>>);
  @override
  _i6.Future<_i2.Either<_i7.SignUpFailure, bool>> updateEmail({
    required String? oldEmail,
    required String? password,
    required String? newEmail,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEmail,
          [],
          {
            #oldEmail: oldEmail,
            #password: password,
            #newEmail: newEmail,
          },
        ),
        returnValue: _i6.Future<_i2.Either<_i7.SignUpFailure, bool>>.value(
            _FakeEither_0<_i7.SignUpFailure, bool>(
          this,
          Invocation.method(
            #updateEmail,
            [],
            {
              #oldEmail: oldEmail,
              #password: password,
              #newEmail: newEmail,
            },
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.SignUpFailure, bool>>);
}
